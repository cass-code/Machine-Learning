# select 30% of the data for validation
validation <- cleaned[-validation_index,]
# use the remaining 70% of data to training and testing the models
cleaned <- cleaned[validation_index,]
# Run algorithms using 10-fold cross validation
control <- trainControl(method="cv", number=10)
metric <- "Accuracy"
# linear algorithms
set.seed(7)
fit.lda <- train(race~., data=cleaned, method="lda", metric=metric, trControl=control)
# CART
set.seed(7)
fit.cart <- train(race~., data=cleaned, method="rpart", metric=metric, trControl=control)
# kNN
set.seed(7)
fit.knn <- train(race~., data=cleaned, method="knn", metric=metric, trControl=control)
# SVM
set.seed(7)
fit.svm <- train(race~., data=cleaned, method="svmRadial", metric=metric, trControl=control)
predictlda <- predict(fit.lda, validation)
ldacon <- confusionMatrix(predictlda, validation$race)
predictcart <- predict(fit.cart, validation)
cartcon <- confusionMatrix(predictcart, validation$race)
predictknn <- predict(fit.knn, validation)
knncon <- confusionMatrix(predictknn, validation$race)
source( "code/draw_confusion_matrix.R")
draw_confusion_matrix(ldacon)
# set the basic layout
layout(matrix(c(1,1,2)))
# set the basic layout
g<- layout(matrix(c(1,1,2)))
g
par(mar=c(2,2,2,2))
a<- par(mar=c(2,2,2,2))
View(a)
g
plot(c(100, 345), c(300, 450), type = "n", xlab="", ylab="", xaxt='n', yaxt='n')
title('CONFUSION MATRIX', cex.main=2)
# create the matrix
classes = colnames(cm$table)
cm <- ldacon
total <- sum(cm$table)
res <- as.numeric(cm$table)
# Generate color gradients. Palettes come from RColorBrewer.
greenPalette <- c("#F7FCF5","#E5F5E0","#C7E9C0","#A1D99B","#74C476","#41AB5D","#238B45","#006D2C","#00441B")
redPalette <- c("#FFF5F0","#FEE0D2","#FCBBA1","#FC9272","#FB6A4A","#EF3B2C","#CB181D","#A50F15","#67000D")
getColor <- function (greenOrRed = "green", amount = 0) {
if (amount == 0)
return("#FFFFFF")
palette <- greenPalette
if (greenOrRed == "red")
palette <- redPalette
colorRampPalette(palette)(100)[10 + ceiling(90 * amount / total)]
}
# set the basic layout
layout(matrix(c(1,1,2)))
par(mar=c(2,2,2,2))
plot(c(100, 345), c(300, 450), type = "n", xlab="", ylab="", xaxt='n', yaxt='n')
title('CONFUSION MATRIX', cex.main=2)
# create the matrix
classes = colnames(cm$table)
rect(150, 430, 240, 370, col=getColor("green", res[1]))
text(195, 435, classes[1], cex=1.2)
rect(250, 430, 340, 370, col=getColor("red", res[3]))
text(295, 435, classes[2], cex=1.2)
text(125, 370, 'Predicted', cex=1.3, srt=90, font=2)
text(245, 450, 'Actual', cex=1.3, font=2)
rect(150, 305, 240, 365, col=getColor("red", res[2]))
rect(250, 305, 340, 365, col=getColor("green", res[4]))
text(140, 400, classes[1], cex=1.2, srt=90)
text(140, 335, classes[2], cex=1.2, srt=90)
classes = colnames(cm$table)
rect(150, 430, 240, 370, col=getColor("green", res[1]))
text(195, 435, classes[3], cex=1.2)
rect(250, 430, 340, 370, col=getColor("red", res[3]))
text(295, 435, classes[4], cex=1.2)
text(125, 370, 'Predicted', cex=1.3, srt=90, font=2)
text(245, 450, 'Actual', cex=1.3, font=2)
rect(150, 305, 240, 365, col=getColor("red", res[2]))
rect(250, 305, 340, 365, col=getColor("green", res[4]))
text(140, 400, classes[3], cex=1.2, srt=90)
text(140, 335, classes[4], cex=1.2, srt=90)
# set the basic layout
layout(matrix(c(1,1,2)))
par(mar=c(2,2,2,2))
plot(c(100, 345), c(300, 450), type = "n", xlab="", ylab="", xaxt='n', yaxt='n')
title('CONFUSION MATRIX', cex.main=2)
# create the matrix
classes = colnames(cm$table)
rect(150, 430, 240, 370, col=getColor("green", res[1]))
text(195, 435, classes[3], cex=1.2)
rect(250, 430, 340, 370, col=getColor("red", res[3]))
text(295, 435, classes[4], cex=1.2)
text(125, 370, 'Predicted', cex=1.3, srt=90, font=2)
text(245, 450, 'Actual', cex=1.3, font=2)
rect(150, 305, 240, 365, col=getColor("red", res[2]))
rect(250, 305, 340, 365, col=getColor("green", res[4]))
text(140, 400, classes[3], cex=1.2, srt=90)
text(140, 335, classes[4], cex=1.2, srt=90)
# add in the cm results
text(195, 400, res[1], cex=1.6, font=2, col='white')
text(195, 335, res[2], cex=1.6, font=2, col='white')
text(295, 400, res[3], cex=1.6, font=2, col='white')
text(295, 335, res[4], cex=1.6, font=2, col='white')
# add in the specifics
plot(c(100, 0), c(100, 0), type = "n", xlab="", ylab="", main = "DETAILS", xaxt='n', yaxt='n')
text(10, 85, names(cm$byClass[1]), cex=1.2, font=2)
text(10, 70, round(as.numeric(cm$byClass[1]), 3), cex=1.2)
text(30, 85, names(cm$byClass[2]), cex=1.2, font=2)
text(30, 70, round(as.numeric(cm$byClass[2]), 3), cex=1.2)
text(50, 85, names(cm$byClass[5]), cex=1.2, font=2)
text(50, 70, round(as.numeric(cm$byClass[5]), 3), cex=1.2)
text(70, 85, names(cm$byClass[6]), cex=1.2, font=2)
text(70, 70, round(as.numeric(cm$byClass[6]), 3), cex=1.2)
text(90, 85, names(cm$byClass[7]), cex=1.2, font=2)
text(90, 70, round(as.numeric(cm$byClass[7]), 3), cex=1.2)
# add in the accuracy information
text(30, 35, names(cm$overall[1]), cex=1.5, font=2)
text(30, 20, round(as.numeric(cm$overall[1]), 3), cex=1.4)
text(70, 35, names(cm$overall[2]), cex=1.5, font=2)
text(70, 20, round(as.numeric(cm$overall[2]), 3), cex=1.4)
cm <- ldacon
# extract the confusion matrix values as data.frame
cm_d <- as.data.frame(cm$table)
# confusion matrix statistics as data.frame
cm_st <-data.frame(cm$overall)
# round the values
cm_st$cm.overall <- round(cm_st$cm.overall,2)
# here we also have the rounded percentage values
cm_p <- as.data.frame(prop.table(cm$table))
cm_d$Perc <- round(cm_p$Freq*100,2)
# plotting the matrix
cm_d_p <-  ggplot(data = cm_d, aes(x = Prediction , y =  Reference, fill = Freq))+
geom_tile() +
geom_text(aes(label = paste("",Freq,",",Perc,"%")), color = 'red', size = 8) +
theme_light() +
guides(fill=FALSE)
# plotting the stats
cm_st_p <-  tableGrob(cm_st)
library(ggplot2)     # to plot
library(gridExtra)   # to put more
library(grid)        # plot together
# plotting the stats
cm_st_p <-  tableGrob(cm_st)
# all together
grid.arrange(cm_d_p, cm_st_p,nrow = 1, ncol = 2,
top=textGrob("Confusion Matrix and Statistics",gp=gpar(fontsize=25,font=1)))
# plotting the matrix
cm_d_p <-  ggplot(data = cm_d, aes(x = Prediction , y =  Reference, fill = Freq))+
geom_tile() +
geom_text(aes(label = paste("",Freq,",",Perc,"%")), color = 'red', size = 4) +
theme_light() +
guides(fill=FALSE)
# plotting the stats
cm_st_p <-  tableGrob(cm_st)
# all together
grid.arrange(cm_d_p, cm_st_p,nrow = 1, ncol = 2,
top=textGrob("Confusion Matrix and Statistics",gp=gpar(fontsize=25,font=1)))
# plotting the matrix
cm_d_p <-  ggplot(data = cm_d, aes(x = Prediction , y =  Reference, fill = Freq))+
geom_tile() +
geom_text(aes(label = paste("",Freq,",",Perc,"%")), color = 'red', size = 4) +
theme_light() +
guides(fill=FALSE)
cm_st <-data.frame(cm$table)
cm_st_p <-
cm_st_p <-  tableGrob(cm_st)
# all together
grid.arrange(cm_d_p, cm_st_p,nrow = 1, ncol = 2,
top=textGrob("Confusion Matrix and Statistics",gp=gpar(fontsize=25,font=1)))
n <- names(cm$overall[1])
n
names(cm$overall[2])
round(as.numeric(cm$overall[1])
# round the values
cm_st$cm.overall <- round(cm_st$cm.overall,2)
# here we also have the rounded percentage values
cm_p <- as.data.frame(prop.table(cm$table))
cm_d$Perc <- round(cm_p$Freq*100,2)
library(ggplot2)     # to plot
library(gridExtra)   # to put more
library(grid)        # plot together
# plotting the matrix
cm_d_p <-  ggplot(data = cm_d, aes(x = Prediction , y =  Reference, fill = Freq))+
geom_tile() +
geom_text(aes(label = paste("",Freq,",",Perc,"%")), color = 'red', size = 4) +
theme_light() +
guides(fill=FALSE)
# plotting the stats
cm_st_p <-
cm_st_p <-  tableGrob(cm_st)
# all together
grid.arrange(cm_d_p, cm_st_p,nrow = 1, ncol = 2,
top=textGrob("Confusion Matrix and Statistics",gp=gpar(fontsize=25,font=1)))
total <- sum(cm$table)
res <- as.numeric(cm$table)
# Generate color gradients. Palettes come from RColorBrewer.
greenPalette <- c("#F7FCF5","#E5F5E0","#C7E9C0","#A1D99B","#74C476","#41AB5D","#238B45","#006D2C","#00441B")
redPalette <- c("#FFF5F0","#FEE0D2","#FCBBA1","#FC9272","#FB6A4A","#EF3B2C","#CB181D","#A50F15","#67000D")
getColor <- function (greenOrRed = "green", amount = 0) {
if (amount == 0)
return("#FFFFFF")
palette <- greenPalette
if (greenOrRed == "red")
palette <- redPalette
colorRampPalette(palette)(100)[10 + ceiling(90 * amount / total)]
}
# set the basic layout
layout(matrix(c(1,1,2)))
par(mar=c(2,2,2,2))
plot(c(100, 345), c(300, 450), type = "n", xlab="", ylab="", xaxt='n', yaxt='n')
title('CONFUSION MATRIX', cex.main=2)
# create the matrix
classes = colnames(cm$table)
rect(150, 430, 240, 370, col=getColor("green", res[1]))
text(195, 435, classes[3], cex=1.2)
rect(250, 430, 340, 370, col=getColor("red", res[3]))
text(295, 435, classes[4], cex=1.2)
text(125, 370, 'Predicted', cex=1.3, srt=90, font=2)
text(245, 450, 'Actual', cex=1.3, font=2)
rect(150, 305, 240, 365, col=getColor("red", res[2]))
rect(250, 305, 340, 365, col=getColor("green", res[4]))
text(140, 400, classes[3], cex=1.2, srt=90)
text(140, 335, classes[4], cex=1.2, srt=90)
# add in the cm results
text(195, 400, res[1], cex=1.6, font=2, col='white')
text(195, 335, res[2], cex=1.6, font=2, col='white')
text(295, 400, res[3], cex=1.6, font=2, col='white')
text(295, 335, res[4], cex=1.6, font=2, col='white')
# add in the specifics
plot(c(100, 0), c(100, 0), type = "n", xlab="", ylab="", main = "DETAILS", xaxt='n', yaxt='n')
text(10, 85, names(cm$byClass[1]), cex=1.2, font=2)
text(10, 70, round(as.numeric(cm$byClass[1]), 3), cex=1.2)
text(30, 85, names(cm$byClass[2]), cex=1.2, font=2)
text(30, 70, round(as.numeric(cm$byClass[2]), 3), cex=1.2)
text(50, 85, names(cm$byClass[5]), cex=1.2, font=2)
text(50, 70, round(as.numeric(cm$byClass[5]), 3), cex=1.2)
text(70, 85, names(cm$byClass[6]), cex=1.2, font=2)
text(70, 70, round(as.numeric(cm$byClass[6]), 3), cex=1.2)
text(90, 85, names(cm$byClass[7]), cex=1.2, font=2)
text(90, 70, round(as.numeric(cm$byClass[7]), 3), cex=1.2)
# add in the accuracy information
text(30, 35, names(cm$overall[1]), cex=1.5, font=2)
text(30, 20, round(as.numeric(cm$overall[1]), 3), cex=1.4)
text(70, 35, names(cm$overall[2]), cex=1.5, font=2)
text(70, 20, round(as.numeric(cm$overall[2]), 3), cex=1.4)
}
round(as.numeric(cm$overall[1]))
names(cm$byClass[1])
a<- names(cm$byClass[1])
a
cm <- ldacon
a<- names(cm$byClass[1])
a# round the values
View(cm_d)
# confusion matrix statistics as data.frame
cm_st <-data.frame(cm$overall)
View(cm_st_p)
View(cm_st_p)
View(cm_st)
View(ldacon)
cm_cl <-data.frame(cm$byClass)
View(cm_cl)
cm_cl_p <- tableGrob(cm_cl)
cm_st_p <-  tableGrob(cm_st)
cm <- ldacon
# extract the confusion matrix values as data.frame
cm_d <- as.data.frame(cm$table)
# confusion matrix statistics as data.frame
cm_st <-data.frame(cm$overall)
cm_cl$cm.byClass <- round(cm_cl$cm.byClass,2)
View(cm_st)
# confusion matrix byClass to look at sensitivity and specificity etc as data.frame
cm_cl <-data.frame(cm$byClass)
cm_cl$cm.byClass <- round(cm_cl$cm.byClass,2)
View(cm_cl)
# here we also have the rounded percentage values
cm_p <- as.data.frame(prop.table(cm$table))
cm_d$Perc <- round(cm_p$Freq*100,2)
library(ggplot2)     # to plot
library(gridExtra)   # to put more
library(grid)        # plot together
# plotting the matrix
cm_d_p <-  ggplot(data = cm_d, aes(x = Prediction , y =  Reference, fill = Freq))+
geom_tile() +
geom_text(aes(label = paste("",Freq,",",Perc,"%")), color = 'red', size = 4) +
theme_light() +
guides(fill=FALSE)
cm_cl_p <- tableGrob(cm_cl)
cm_st_p <-  tableGrob(cm_st)
# all together
grid.arrange(cm_d_p, cm_cl_p, cm_st_p,nrow = 1, ncol = 3,
top=textGrob("Confusion Matrix and Statistics",gp=gpar(fontsize=25,font=1)))
# all together
grid.arrange(cm_d_p, cm_st_p,nrow, cm_cl_p = 2, ncol = 2,
top=textGrob("Confusion Matrix and Statistics",gp=gpar(fontsize=25,font=1)))
# all together
grid.arrange(cm_d_p, cm_st_p,nrow, cm_cl_p = 2, ncol = 2,
top=textGrob("Confusion Matrix and Statistics",gp=gpar(fontsize=25,font=1)))
# all together
grid.arrange(cm_d_p, cm_st_p, cm_cl_p, nrow = 2, ncol = 2,
top=textGrob("Confusion Matrix and Statistics",gp=gpar(fontsize=25,font=1)))
# round the values
cm_st$cm.overall <- round(cm_st$cm.overall,2)
cm_cl <- round(cm_cl,2)
View(cm_cl)
View(cm_st)
# round the values
cm_st$cm.overall <- round(cm_st$cm.overall,2)
View(cm_st)
cm_cl_p <- tableGrob(cm_cl)
cm_st_p <-  tableGrob(cm_st)
View(cm_st_p)
# all together
grid.arrange(cm_d_p, cm_st_p, cm_cl_p, nrow = 2, ncol = 2,
top=textGrob("Confusion Matrix and Statistics",gp=gpar(fontsize=25,font=1)))
View(ldacon)
cm <- ldacon
View(cm)
print(cm)
View(cm_d)
# all together
grid.arrange(cm_d_p, cm_st_p, cm_cl_p, nrow = 3, ncol = 3,
top=textGrob("Confusion Matrix and Statistics",gp=gpar(fontsize=25,font=1)))
# all together
grid.arrange(cm_d_p, cm_st_p, cm_cl_p, nrow = 3, ncol = 1,
top=textGrob("Confusion Matrix and Statistics",gp=gpar(fontsize=25,font=1)))
# all together
grid.arrange(cm_d_p, cm_st_p, cm_cl_p, nrow = 2, ncol = 2,
top=textGrob("Confusion Matrix and Statistics",gp=gpar(fontsize=25,font=1)))
# Generate color gradients. Palettes come from RColorBrewer.
greenPalette <- c("#F7FCF5","#E5F5E0","#C7E9C0","#A1D99B","#74C476","#41AB5D","#238B45","#006D2C","#00441B")
redPalette <- c("#FFF5F0","#FEE0D2","#FCBBA1","#FC9272","#FB6A4A","#EF3B2C","#CB181D","#A50F15","#67000D")
getColor <- function (greenOrRed = "green", amount = 0) {
if (amount == 0)
return("#FFFFFF")
palette <- greenPalette
if (greenOrRed == "red")
palette <- redPalette
colorRampPalette(palette)(100)[10 + ceiling(90 * amount / total)]
}
# plotting the matrix
cm_d_p <-  ggplot(data = cm_d, aes(x = Prediction , y =  Reference, fill = Freq))+
geom_tile() +
geom_text(aes(label = paste("",Freq,",",Perc,"%")), color = 'pink', size = 4) +
theme_light() +
guides(fill=FALSE)
# all together
grid.arrange(cm_d_p, cm_st_p, cm_cl_p, nrow = 2, ncol = 2,
top=textGrob("Confusion Matrix and Statistics",gp=gpar(fontsize=25,font=1)))
# plotting the matrix
cm_d_p <-  ggplot(data = cm_d, aes(x = Prediction , y =  Reference, fill = Freq))+
geom_tile() +
geom_text(aes(label = paste("",Freq,",",Perc,"%")), color = '#C7E9C0', size = 4) +
theme_dark() +
guides(fill=FALSE)
# all together
grid.arrange(cm_d_p, cm_st_p, cm_cl_p, nrow = 2, ncol = 2,
top=textGrob("Confusion Matrix and Statistics",gp=gpar(fontsize=25,font=1)))
# plotting the matrix
cm_d_p <-  ggplot(data = cm_d, aes(x = Prediction , y =  Reference, fill = Freq))+
geom_tile(aes(scale_fill_distiller(palette = "YlGnBu", direction = 1))) +
geom_text(aes(label = paste("",Freq,",",Perc,"%")), color = '#C7E9C0', size = 4) +
theme_light() +
guides(fill=FALSE)
# all together
grid.arrange(cm_d_p, cm_st_p, cm_cl_p, nrow = 2, ncol = 2,
top=textGrob("Confusion Matrix and Statistics",gp=gpar(fontsize=25,font=1)))
# plotting the matrix
cm_d_p <-  ggplot(data = cm_d, aes(x = Prediction , y =  Reference, fill = Freq))+
geom_tile(aes(discrete_fill_distiller(palette = "YlGnBu", direction = 1))) +
geom_text(aes(label = paste("",Freq,",",Perc,"%")), color = '#C7E9C0', size = 4) +
theme_light() +
guides(fill=FALSE)
# all together
grid.arrange(cm_d_p, cm_st_p, cm_cl_p, nrow = 2, ncol = 2,
top=textGrob("Confusion Matrix and Statistics",gp=gpar(fontsize=25,font=1)))
# plotting the matrix
cm_d_p <-  ggplot(data = cm_d, aes(x = Prediction , y =  Reference, fill = Freq))+
geom_tile(aes(scale_colour_distiller(palette = "YlGnBu", direction = 1))) +
geom_text(aes(label = paste("",Freq,",",Perc,"%")), color = '#C7E9C0', size = 4) +
theme_light() +
guides(fill=FALSE)
# all together
grid.arrange(cm_d_p, cm_st_p, cm_cl_p, nrow = 2, ncol = 2,
top=textGrob("Confusion Matrix and Statistics",gp=gpar(fontsize=25,font=1)))
cm_d_p + scale_colour_distiller(palette = "YlGnBu")
# plotting the matrix
cm_d_p <-  ggplot(data = cm_d, aes(x = Prediction , y =  Reference, fill = Freq))+
geom_tile() +
geom_text(aes(label = paste("",Freq,",",Perc,"%")), color = '#C7E9C0', size = 4) +
theme_light() +
guides(fill=FALSE)
cm_d_p + scale_colour_distiller(palette = "YlGnBu")
# all together
grid.arrange(cm_d_p, cm_st_p, cm_cl_p, nrow = 2, ncol = 2,
top=textGrob("Confusion Matrix and Statistics",gp=gpar(fontsize=25,font=1)))
cm_d_p + scale_fill_distiller(palette = "YlGnBu")
cm_d_p + scale_fill_brewer(palette = "Pastel")
cm_d_p + scale_fill_brewer(palette = "Pastel1")
cm_d_p + scale_colour_brewer(palette = "Pastel1")
cm_d_p + scale_fill_distiller(palette = "YlGnBu")
cm_d_p + scale_fill_brewer(palette = "Pastel1")
# all together
grid.arrange(cm_d_p, cm_st_p, cm_cl_p, nrow = 2, ncol = 2,
top=textGrob("Confusion Matrix and Statistics",gp=gpar(fontsize=25,font=1)))
cm_d_p + scale_colour_brewer(palette = "Pastel1")
# all together
grid.arrange(cm_d_p, cm_st_p, cm_cl_p, nrow = 2, ncol = 2,
top=textGrob("Confusion Matrix and Statistics",gp=gpar(fontsize=25,font=1)))
cm_d_p + scale_fill_brewer(palette = "Set1")
cm_d_p + scale_fill_distiller(palette = "Set1")
cm_d_p + scale_fill_distiller(palette = "Pastel1")
cm_d_p + scale_fill_distiller(palette = "Pastel2")
cm_d_p + scale_fill_distiller(palette = "Set2")
cm_d_p + scale_fill_distiller(palette = "Paired")
cm_d_p + scale_fill_distiller(palette = "Sectral")
cm_d_p + scale_fill_distiller(palette = "Spectral")
cm_d_p + scale_fill_distiller(palette = "RdBu")
cm_d_p + scale_fill_distiller(palette = "RdBu", direction=-1)
cm_d_p + scale_fill_distiller(palette = "RdBu", direction= 1)
cm_d_p + scale_fill_distiller(palette = "RdGn", direction = 1)
# plotting the matrix
cm_d_p <-  ggplot(data = cm_d, aes(x = Prediction , y =  Reference, fill = Freq))+
geom_tile() +
geom_text(aes(label = paste("",Freq,",",Perc,"%")), color = 'white', size = 4) +
theme_light() +
guides(fill=FALSE)
# all together
grid.arrange(cm_d_p, cm_st_p, cm_cl_p, nrow = 2, ncol = 2,
top=textGrob("Confusion Matrix and Statistics",gp=gpar(fontsize=25,font=1)))
cm_d_p <- cm_d_p + scale_fill_distiller(palette = "RdGn", direction = 1)
cm_d_p <- cm_d_p + scale_fill_distiller(palette = "Gn", direction = 1)
cm_d_p <- cm_d_p + scale_fill_distiller(palette = "Greens", direction = 1)
# plotting the matrix
cm_d_p <-  ggplot(data = cm_d, aes(x = Prediction , y =  Reference, fill = Freq))+
geom_tile() +
geom_text(aes(label = paste("",Freq,",",Perc,"%")), color = 'white', size = 4) +
theme_light() +
guides(fill=FALSE)
cm_d_p <- cm_d_p + scale_fill_distiller(palette = "Greens", direction = 1)
# all together
grid.arrange(cm_d_p, cm_st_p, cm_cl_p, nrow = 2, ncol = 2,
top=textGrob("Confusion Matrix and Statistics",gp=gpar(fontsize=25,font=1)))
# plotting the matrix
cm_d_p <-  ggplot(data = cm_d, aes(x = Prediction , y =  Reference, fill = Freq))+
geom_tile() +
geom_text(aes(label = paste("",Freq,",",Perc,"%")), color = 'black', size = 4) +
theme_light() +
guides(fill=FALSE)
cm_d_p <- cm_d_p + scale_fill_distiller(palette = "Greens", direction = 1)
# all together
grid.arrange(cm_d_p, cm_st_p, cm_cl_p, nrow = 2, ncol = 2,
top=textGrob("Confusion Matrix and Statistics",gp=gpar(fontsize=25,font=1)))
source( "code/draw_confusion_matrix.R")
draw_confusion_matrix(ldacon)
clead(Adult)
clean(Adult)
library(caret)
library(tidyverse)
# create a list of 70% of the rows in the original dataset we can use for training
validation_index <- createDataPartition(cleaned$race, p=0.70, list=FALSE)
# select 30% of the data for validation
validation <- cleaned[-validation_index,]
# use the remaining 70% of data to training and testing the models
cleaned <- cleaned[validation_index,]
# Run algorithms using 10-fold cross validation
control <- trainControl(method="cv", number=10)
metric <- "Accuracy"
cleaned <- clean(Adult)
library(caret)
library(tidyverse)
# create a list of 70% of the rows in the original dataset we can use for training
validation_index <- createDataPartition(cleaned$race, p=0.70, list=FALSE)
# select 30% of the data for validation
validation <- cleaned[-validation_index,]
# use the remaining 70% of data to training and testing the models
cleaned <- cleaned[validation_index,]
# Run algorithms using 10-fold cross validation
control <- trainControl(method="cv", number=10)
metric <- "Accuracy"
# linear algorithms
set.seed(7)
fit.lda <- train(race~., data=cleaned, method="lda", metric=metric, trControl=control)
# CART
set.seed(7)
fit.cart <- train(race~., data=cleaned, method="rpart", metric=metric, trControl=control)
# kNN
set.seed(7)
fit.knn <- train(race~., data=cleaned, method="knn", metric=metric, trControl=control)
predictlda <- predict(fit.lda, validation)
ldacon <- confusionMatrix(predictlda, validation$race)
predictcart <- predict(fit.cart, validation)
cartcon <- confusionMatrix(predictcart, validation$race)
predictknn <- predict(fit.knn, validation)
knncon <- confusionMatrix(predictknn, validation$race)
predicted <- list(ldacon, cartcon, knncon)
View(predicted)
draw_confusion_matrix(predicted[[1]])
draw_confusion_matrix(predicted[[2]])
draw_confusion_matrix(predicted[[3]])
cleaned <- clean(Adult)
predicted <- ML_Predict(cleaned)
list.files('code/', full.names = T, recursive = T) %>% as.list() %>% walk(~source(.))
source( "code/ML_results.R")
list.files('code/', full.names = T, recursive = T) %>% as.list() %>% walk(~source(.))
cleaned <- clean(Adult)
predicted <- ML_Predict(cleaned)
g<-draw_confusion_matrix(predicted[[3]])
cleaned <- clean(Adult)
predicted <- ML_Predict(cleaned)
g<-draw_confusion_matrix(predicted[[3]])
